name: Build and Deploy Website

on:
  push:
    branches: [ main ]
    paths: [ 'README.md', 'website/**' ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  validate-and-parse:
    runs-on: ubuntu-latest
    outputs:
      deploy: ${{ steps.changes.outputs.deploy }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: website/package-lock.json

    - name: Install dependencies
      run: |
        cd website
        npm ci

    - name: Validate README format
      run: |
        cd website
        npm run validate

    - name: Parse README to JSON
      run: |
        cd website
        npm run parse-data

    - name: Check for changes
      id: changes
      run: |
        if git diff --quiet HEAD~1 -- README.md website/public/data/benchmarks.json; then
          echo "deploy=false" >> $GITHUB_OUTPUT
        else
          echo "deploy=true" >> $GITHUB_OUTPUT
        fi

    - name: Commit updated data files
      if: steps.changes.outputs.deploy == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "üöÄ BenchmarkBot AI"
        git add website/public/data/benchmarks.json
        git diff --staged --quiet || git commit -m "ü§ñ Update benchmark data from README.md

        Co-Authored-By: GitHub Actions <action@github.com>"

    - name: Push changes
      if: steps.changes.outputs.deploy == 'true'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: main

  # Build job for Next.js site
  build:
    needs: validate-and-parse
    if: needs.validate-and-parse.outputs.deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
      
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/website/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=website/yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/website/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=website/package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ steps.detect-package-manager.outputs.lockfile }}
      
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next
      
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            website/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      
      - name: Install dependencies
        run: |
          cd website
          ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      
      - name: Build with Next.js
        run: |
          cd website
          ${{ steps.detect-package-manager.outputs.runner }} next build
        env:
          NODE_ENV: production
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./website/out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  notify-success:
    needs: [validate-and-parse, build, deploy]
    if: always() && needs.deploy.result == 'success'
    runs-on: ubuntu-latest

    steps:
    - name: Notify deployment success
      run: |
        echo "‚úÖ Website successfully deployed to GitHub Pages!"
        echo "üåê Visit: ${{ needs.deploy.outputs.page_url }}"
